import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

// Hook pour nettoyer les sessions expirÃ©es rÃ©guliÃ¨rement
export const useSessionCleanup = () => {
  useEffect(() => {
    const cleanupExpiredSessions = async () => {
      try {
        // VÃ©rifier si l'utilisateur est authentifiÃ© avant le nettoyage
        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          return; // Pas d'utilisateur connectÃ©, pas de nettoyage nÃ©cessaire
        }

        console.log('ðŸ§¹ Nettoyage des sessions expirÃ©es...');
        
        // Nettoyer les sessions de mÃ©decins expirÃ©es (seulement si admin/mÃ©decin)
        const { data: profile } = await supabase
          .from('profiles')
          .select('role')
          .eq('user_id', session.user.id)
          .single();

        if (profile?.role === 'admin' || profile?.role === 'doctor') {
          const { error: doctorSessionError } = await supabase
            .from('doctor_access_sessions')
            .update({ is_active: false })
            .eq('is_active', true)
            .lt('expires_at', new Date().toISOString());

          if (doctorSessionError && doctorSessionError.code !== 'PGRST301') {
            console.error('Erreur nettoyage sessions mÃ©decins:', doctorSessionError);
          }

          const { error: qrCodeError } = await supabase
            .from('qr_codes')
            .update({ status: 'expired' })
            .eq('status', 'active')
            .lt('expires_at', new Date().toISOString());

          if (qrCodeError && qrCodeError.code !== 'PGRST301') {
            console.error('Erreur nettoyage QR codes:', qrCodeError);
          }
        }

        console.log('âœ… Nettoyage des sessions terminÃ©');
      } catch (error) {
        // Ignorer les erreurs JWT expirÃ©es et autres erreurs d'authentification
        if (error?.code !== 'PGRST301') {
          console.error('Erreur lors du nettoyage des sessions:', error);
        }
      }
    };

    // Nettoyer immÃ©diatement au dÃ©marrage
    cleanupExpiredSessions();

    // Puis nettoyer toutes les 5 minutes
    const interval = setInterval(cleanupExpiredSessions, 5 * 60 * 1000);

    return () => {
      clearInterval(interval);
    };
  }, []);
};